# --------------------------------------------------------------------
# Test batch calculations for AVHRR. See also TestHIRS.arts.
# Gerrit Holl, July 2011
# Based on TestHIRS.arts
# --------------------------------------------------------------------

Arts2 {


water_p_eq_agendaSet
gas_scattering_agendaSet
PlanetSet(option="Earth")

# (standard) emission calculation
iy_main_agendaSet(option="Emission")

# cosmic background radiation
iy_space_agendaSet

# standard surface agenda (i.e., make use of surface_rtprop_agenda)
iy_surface_agendaSet

# sensor-only path
ppath_agendaSet( option="FollowSensorLosPath" )

# no refraction
ppath_step_agendaSet( option="GeometricPath" )

# blackbody surface with skin temperature interpolated from t_surface field
surface_rtprop_agendaSet( option="Blackbody_SurfTFromt_field" )


StringCreate(satellite)
ArrayOfIndexCreate(channels)
ArrayOfIndexCreate(views)
StringCreate(cat_file)
NumericCreate(f_grid_spacing)
StringCreate(dummy)


# Select here which satellite you want
# ---
StringSet(satellite, "NOAA19")


# Select here which channels you want
# ---
#
# ARTS 0 --> AVHRR 3B
# ARTS 1 --> AVHRR 4
# ARTS 2 --> AVHRR 5
ArrayOfIndexSet(channels, [2])

# Select here which views you want.
# AVHRR LAC/FRAC has 1024 views
# ---
ArrayOfIndexSet(views, [0, 256, 512, 768, 1023])

StringSet(cat_file,"lines/")


# Set frequency grid spacing
# (See comments in hirs_reference.arts concerning useful values here)
# ---
NumericSet(f_grid_spacing, 5e8)


# Basic settings (already needed in sensor part)
# ---
# This example assumes 1D
AtmosphereSet1D
# scalar RT
IndexSet( stokes_dim, 1 )


# HIRS spectral response functions assume radiance.
StringSet( iy_unit, "1" )


# Set up absorption
# ---
abs_speciesSet( species=[ "H2O, H2O-SelfContCKDMT350, H2O-ForeignContCKDMT350",
                          "O3",
                          "CO2, CO2-CKDMT252",
                          "N2O",
                          "CO",
                          "CH4",
                          "O2, O2-CIAfunCKDMT100",
                          "N2, N2-CIAfunCKDMT252, N2-CIArotCKDMT252" ] )

# deriving abs_lines separate, because one might want to use a lookup table
#
# no use of full ARTSCAT in test cases
# (uncomment when you want to use full ARTSCAT)
#abs_linesReadSpeciesSplitCatalog( basename=cat_file )
# instead we use a ARTSCAT-extract
# (comment out when you want to use full ARTSCAT)
ReadARTSCAT( abs_lines, "testdata/abs_lines_IR.xml.gz" )
abs_linesNormalization(option="VVH")
abs_linesCutoff(option="ByLine", value=750e9)

abs_lines_per_speciesCreateFromLines


# Definition of sensor position and LOS
# ---
ReadXML( sensor_los, "instruments/avhrr/avhrr.sensor_los.xml" )

# Select those views that are requested by the user
Select( sensor_los, sensor_los, views )

nrowsGet( nrows, sensor_los )
ncolsGet( ncols, sensor_los )
MatrixSetConstant( sensor_pos, nrows, ncols, 850e3 )


# Start sensor response setup
# ---

# Normalise the sensor response
# ---
IndexSet( sensor_norm, 1 )

# Antenna
# ---
AntennaOff


# Construct names of sensor description files:
 
# Nominal channel frequencies:
StringCreate( f_backend_file)
StringSet(    f_backend_file, "instruments/avhrr/")
Append(       f_backend_file, satellite)
StringCreate( dummy )
StringSet(    dummy,          "_AVHRR.f_backend.xml")
Append(       f_backend_file, dummy)

# Sensor setup
# ---


# Channel response functions:
StringCreate(backend_channel_response_file)
StringSet(backend_channel_response_file, "instruments/avhrr/")
Append(backend_channel_response_file, satellite)
StringSet(dummy, "_AVHRR.backend_channel_response.xml")
#
Append(backend_channel_response_file, dummy)



# Spectrometer:
#
ReadXML( f_backend, f_backend_file )
ReadXML( backend_channel_response,
         backend_channel_response_file )

# Select the desired channels:
#
Select(f_backend, f_backend, channels)
Select(backend_channel_response, backend_channel_response, channels)


# Frequency grid:
#
# In my (Gerrit) understanding this can be used for AVHRR as wel
f_gridFromSensorHIRS(f_grid,
                     f_backend, backend_channel_response,
                     f_grid_spacing )


# Construct sensor response from all these inputs:
#
sensor_responseInit
sensor_responseBackend


# End of sensor response setup


# Compact line list, to kick out lines that are outside there
# cutoff range for all frequencies.
abs_lines_per_speciesCompact


# Set up absorption
# =================

ReadXML( batch_atm_fields_compact, "testdata/garand_profiles.xml.gz" )

# add constant profiles for O2 and N2
batch_atm_fields_compactAddConstant( name="abs_species-O2", value=0.2095 )
batch_atm_fields_compactAddConstant( name="abs_species-N2", value=0.7808 )


# Setup lookup table
# ---
lbl_checkedCalc
propmat_clearsky_agendaAuto
abs_lookupSetupBatch
abs_lookupCalc

# Set propmat_clearsky_agenda to use lookup table
# ---
propmat_clearsky_agendaAuto( use_abs_lookup=1 )

# Set up RT calculation
# =====================

# Set the agenda for batch calculations:
# ---
#
AgendaSet( ybatch_calc_agenda ){
  
  # Extract the atmospheric profiles for this case:
  Extract(
    atm_fields_compact, 
    batch_atm_fields_compact, 
    ybatch_index
  )

  AtmFieldsAndParticleBulkPropFieldFromCompact

  # get some surface properties from corresponding atmospheric fields
  Extract( z_surface, z_field, 0 )
  Extract( t_surface, t_field, 0 )

  # No jacobian calculations
  jacobianOff

  # No scattering
  cloudboxOff

  # Perform RT calculations
  # ---
  atmfields_checkedCalc
  atmgeom_checkedCalc
  cloudbox_checkedCalc
  sensor_checkedCalc
  yCalc

  # Convert the measurement from radiance units to Planck Tb:
  StringSet( iy_unit, "PlanckBT" )
  yApplyUnit
}

# Set number of batch cases (uncomment according to your needs):
# this one for all cases in atmosphere batch
#nelemGet( ybatch_n, batch_atm_fields_compact )
# for testing, ALL cases take too long. so we do only the first 2 (still takes
# ~15min on an 8-node system.
IndexSet(ybatch_n, 2)

# Execute the batch calculations:
# ---
propmat_clearsky_agenda_checkedCalc
ybatchCalc

# Store result matrix:
# ---
WriteXML( "ascii", ybatch )


}
